#region VEXcode Generated Robot Configuration
import math
import random
from vexcode_vr import *

# Brain should be defined by default
brain=Brain()

drivetrain = Drivetrain("drivetrain", 0)
rover = Rover("ai", 1)
distance = Distance("distance", 6)

#endregion VEXcode Generated Robot Configuration
drivetrain.set_drive_velocity(200, PERCENT)
drivetrain.set_turn_velocity(200, PERCENT)
def when_started1():
    while True:
        drivetrain.set_heading(0,DEGREES)
        if rover.under_attack():
            drivetrain.turn_to(ENEMY)
            drivetrain.go_to(ENEMY)
            rover.absorb_radiation(ENEMY)
        if rover.sees(ENEMY) or rover.sees(MINERALS):
            if rover.detects(ENEMY) and rover.battery() > 35 and rover.minerals_stored() > 0:
                if rover.get_distance(ENEMY, MM) < 3 and rover.sees(ENEMY):
                    rover.absorb_radiation(ENEMY)
                else:
                    drivetrain.turn_to_heading(rover.angle(ENEMY), DEGREES)
                    drivetrain.drive_for(FORWARD,100,MM)
                    drivetrain.go_to(ENEMY)
            elif rover.battery() < 35 and not drivetrain.is_moving():
                rover.drop(MINERALS)
                rover.use(MINERALS)
            elif rover.sees(MINERALS) or rover.detects(MINERALS) or rover.sees(MINERALS) and not drivetrain.is_moving() or rover.detects(MINERALS) and not drivetrain.is_moving():
                if rover.minerals_stored() < rover.storage_capacity():
                    drivetrain.turn_to(MINERALS)
                    drivetrain.drive_for(FORWARD,rover.get_distance(MINERALS,MM),MM)
                    rover.pickup(MINERALS)
                elif rover.get_distance(MINERALS,MM) < 50 or rover.battery() > 35:
                    rover.standby(2)
                    rover.drop(MINERALS)
                    rover.use(MINERALS)
                    rover.pickup(MINERALS)
                    rover.pickup(MINERALS)
        elif rover.sees(HAZARD) or rover.sees(OBSTACLE):
            drivetrain.turn_to_heading(drivetrain.heading(DEGREES)+330,DEGREES)
            wait(0.5, SECONDS)
        elif not rover.detects(MINERALS) and not rover.sees(MINERALS) or not rover.detects(ENEMY) and not rover.sees(ENEMY) or not rover.sees(MINERALS) or not rover.sees(ENEMY) or not rover.sees(OBSTACLE) or not rover.sees(HAZARD):
            if rover.get_distance(HAZARD,MM) < 200 or rover.get_distance(OBSTACLE,MM) < 200:
                            drivetrain.drive_for(FORWARD,50,MM,wait=False)
            else:
                drivetrain.drive_for(FORWARD,100,MM,wait=False)
vr_thread(when_started1)
